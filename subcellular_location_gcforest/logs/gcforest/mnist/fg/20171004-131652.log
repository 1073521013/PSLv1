[ 2017-10-04 13:16:54,264][train_fg.<module>] tools.train_fg
[ 2017-10-04 13:16:54,265][train_fg.<module>] 
{
    "dataset":{
        "test":{
            "data_set":"test",
            "layout_x":"tensor",
            "type":"mnist"
        },
        "train":{
            "data_set":"train",
            "layout_x":"tensor",
            "type":"mnist"
        }
    },
    "net":{
        "layers":[
            {
                "bottoms":[
                    "X",
                    "y"
                ],
                "estimators":[
                    {
                        "max_depth":100,
                        "min_samples_leaf":10,
                        "n_estimators":500,
                        "n_folds":3,
                        "n_jobs":-1,
                        "type":"ExtraTreesClassifier"
                    },
                    {
                        "max_depth":100,
                        "min_samples_leaf":10,
                        "n_estimators":500,
                        "n_folds":3,
                        "n_jobs":-1,
                        "type":"RandomForestClassifier"
                    }
                ],
                "n_classes":10,
                "name":"win1/7x7",
                "stride_x":2,
                "stride_y":2,
                "tops":[
                    "win1/7x7/ets",
                    "win1/7x7/rf"
                ],
                "type":"FGWinLayer",
                "win_x":7,
                "win_y":7
            },
            {
                "bottoms":[
                    "X",
                    "y"
                ],
                "estimators":[
                    {
                        "max_depth":100,
                        "min_samples_leaf":10,
                        "n_estimators":500,
                        "n_folds":3,
                        "n_jobs":-1,
                        "type":"ExtraTreesClassifier"
                    },
                    {
                        "max_depth":100,
                        "min_samples_leaf":10,
                        "n_estimators":500,
                        "n_folds":3,
                        "n_jobs":-1,
                        "type":"RandomForestClassifier"
                    }
                ],
                "n_classes":10,
                "name":"win1/10x10",
                "stride_x":2,
                "stride_y":2,
                "tops":[
                    "win1/10x10/ets",
                    "win1/10x10/rf"
                ],
                "type":"FGWinLayer",
                "win_x":10,
                "win_y":10
            },
            {
                "bottoms":[
                    "X",
                    "y"
                ],
                "estimators":[
                    {
                        "max_depth":100,
                        "min_samples_leaf":10,
                        "n_estimators":500,
                        "n_folds":3,
                        "n_jobs":-1,
                        "type":"ExtraTreesClassifier"
                    },
                    {
                        "max_depth":100,
                        "min_samples_leaf":10,
                        "n_estimators":500,
                        "n_folds":3,
                        "n_jobs":-1,
                        "type":"RandomForestClassifier"
                    }
                ],
                "n_classes":10,
                "name":"win1/13x13",
                "stride_x":2,
                "stride_y":2,
                "tops":[
                    "win1/13x13/ets",
                    "win1/13x13/rf"
                ],
                "type":"FGWinLayer",
                "win_x":13,
                "win_y":13
            },
            {
                "bottoms":[
                    "win1/7x7/ets",
                    "win1/7x7/rf",
                    "win1/10x10/ets",
                    "win1/10x10/rf",
                    "win1/13x13/ets",
                    "win1/13x13/rf"
                ],
                "name":"pool1",
                "pool_method":"avg",
                "tops":[
                    "pool1/7x7/ets",
                    "pool1/7x7/rf",
                    "pool1/10x10/ets",
                    "pool1/10x10/rf",
                    "pool1/13x13/ets",
                    "pool1/13x13/rf"
                ],
                "type":"FGPoolLayer",
                "win_x":2,
                "win_y":2
            }
        ],
        "outputs":[
            "pool1/7x7/ets",
            "pool1/7x7/rf",
            "pool1/10x10/ets",
            "pool1/10x10/rf",
            "pool1/13x13/ets",
            "pool1/13x13/rf"
        ]
    },
    "train":{
        "data_cache":{
            "cache_dir":"/home/guest_majian/python/gcForest_official/gcforest/mnist/fg-tree500-depth100-3folds/datas",
            "cache_in_disk":{
                "default":1
            },
            "keep_in_mem":{
                "default":0
            }
        },
        "keep_model_in_mem":0,
        "random_state":0
    }
}
[ 2017-10-04 13:16:55,210][fgnet.fit_transform] X_train.shape=(11231, 1, 8, 8), y_train.shape=(11231,), X_test.shape=(2773, 1, 8, 8), y_test.shape=(2773,)
[ 2017-10-04 13:16:55,210][fg_win_layer.fit_transform] [data][win1/7x7], bottoms=[u'X', u'y'], tops=[u'win1/7x7/ets', u'win1/7x7/rf']
[ 2017-10-04 13:16:55,210][fg_win_layer.fit_transform] [progress][win1/7x7] ti=0/2, top_name=win1/7x7/ets
[ 2017-10-04 13:16:55,211][fg_win_layer.fit_transform] [data][win1/7x7,train] bottoms.shape=11231x1x8x8,11231
[ 2017-10-04 13:16:55,212][win_utils.get_windows] get_windows_start: X.shape=(11231, 1, 8, 8), X_win.shape=(49, 11231), nw=1, nh=1, c=1, win_x=7, win_y=7, stride_x=2, stride_y=2
[ 2017-10-04 13:16:55,352][win_utils.get_windows] get_windows_end
[ 2017-10-04 13:16:55,352][fg_win_layer.fit_transform] [data][win1/7x7,test] bottoms.shape=2773x1x8x8,2773
[ 2017-10-04 13:16:55,353][win_utils.get_windows] get_windows_start: X.shape=(2773, 1, 8, 8), X_win.shape=(49, 2773), nw=1, nh=1, c=1, win_x=7, win_y=7, stride_x=2, stride_y=2
[ 2017-10-04 13:16:55,489][win_utils.get_windows] get_windows_end
[ 2017-10-04 13:16:55,504][base_estimator.fit] X_train.shape=(7483, 49), y_train.shape=(7483,)
[ 2017-10-04 13:16:57,348][base_estimator.predict_proba] X.shape=(3748, 49)
[ 2017-10-04 13:16:57,702][base_estimator.predict_proba] y_proba.shape=(3748, 10)
[ 2017-10-04 13:16:57,702][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.train_0.predict)=56.19%
[ 2017-10-04 13:16:57,715][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.train_0.vote)=56.19%
[ 2017-10-04 13:16:57,716][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.train_0.avg)=56.19%
[ 2017-10-04 13:16:57,716][base_estimator.predict_proba] X.shape=(2773, 49)
[ 2017-10-04 13:16:58,047][base_estimator.predict_proba] y_proba.shape=(2773, 10)
[ 2017-10-04 13:16:58,053][base_estimator.fit] X_train.shape=(7486, 49), y_train.shape=(7486,)
[ 2017-10-04 13:16:59,892][base_estimator.predict_proba] X.shape=(3745, 49)
[ 2017-10-04 13:17:00,232][base_estimator.predict_proba] y_proba.shape=(3745, 10)
[ 2017-10-04 13:17:00,232][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.train_1.predict)=56.18%
[ 2017-10-04 13:17:00,246][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.train_1.vote)=56.18%
[ 2017-10-04 13:17:00,247][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.train_1.avg)=56.18%
[ 2017-10-04 13:17:00,247][base_estimator.predict_proba] X.shape=(2773, 49)
[ 2017-10-04 13:17:00,576][base_estimator.predict_proba] y_proba.shape=(2773, 10)
[ 2017-10-04 13:17:00,582][base_estimator.fit] X_train.shape=(7493, 49), y_train.shape=(7493,)
[ 2017-10-04 13:17:02,304][base_estimator.predict_proba] X.shape=(3738, 49)
[ 2017-10-04 13:17:02,633][base_estimator.predict_proba] y_proba.shape=(3738, 10)
[ 2017-10-04 13:17:02,633][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.train_2.predict)=56.69%
[ 2017-10-04 13:17:02,646][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.train_2.vote)=56.69%
[ 2017-10-04 13:17:02,647][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.train_2.avg)=56.69%
[ 2017-10-04 13:17:02,647][base_estimator.predict_proba] X.shape=(2773, 49)
[ 2017-10-04 13:17:02,973][base_estimator.predict_proba] y_proba.shape=(2773, 10)
[ 2017-10-04 13:17:02,974][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.train.predict)=56.35%
[ 2017-10-04 13:17:03,014][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.train.vote)=56.35%
[ 2017-10-04 13:17:03,015][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.train.avg)=56.35%
[ 2017-10-04 13:17:03,015][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.test.predict)=49.69%
[ 2017-10-04 13:17:03,025][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.test.vote)=49.69%
[ 2017-10-04 13:17:03,025][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/ets/3_folds.test.avg)=49.69%
[ 2017-10-04 13:17:03,029][fg_win_layer.fit_transform] [data][win1/7x7,train] tops[0].shape=(11231, 10, 1, 1)
[ 2017-10-04 13:17:03,029][data_cache.update] Updating data (train->win1/7x7/ets, shape=(11231, 10, 1, 1)) in disk: /home/guest_majian/python/gcForest_official/gcforest/mnist/fg-tree500-depth100-3folds/datas/train/win1-7x7-ets.npy
[ 2017-10-04 13:17:03,030][fg_win_layer.fit_transform] [data][win1/7x7,test] tops[0].shape=(2773, 10, 1, 1)
[ 2017-10-04 13:17:03,030][data_cache.update] Updating data (test->win1/7x7/ets, shape=(2773, 10, 1, 1)) in disk: /home/guest_majian/python/gcForest_official/gcforest/mnist/fg-tree500-depth100-3folds/datas/test/win1-7x7-ets.npy
[ 2017-10-04 13:17:03,031][fg_win_layer.fit_transform] [progress][win1/7x7] ti=1/2, top_name=win1/7x7/rf
[ 2017-10-04 13:17:03,039][base_estimator.fit] X_train.shape=(7483, 49), y_train.shape=(7483,)
[ 2017-10-04 13:17:05,343][base_estimator.predict_proba] X.shape=(3748, 49)
[ 2017-10-04 13:17:05,698][base_estimator.predict_proba] y_proba.shape=(3748, 10)
[ 2017-10-04 13:17:05,699][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.train_0.predict)=58.08%
[ 2017-10-04 13:17:05,712][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.train_0.vote)=58.08%
[ 2017-10-04 13:17:05,712][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.train_0.avg)=58.08%
[ 2017-10-04 13:17:05,713][base_estimator.predict_proba] X.shape=(2773, 49)
[ 2017-10-04 13:17:06,043][base_estimator.predict_proba] y_proba.shape=(2773, 10)
[ 2017-10-04 13:17:06,048][base_estimator.fit] X_train.shape=(7486, 49), y_train.shape=(7486,)
[ 2017-10-04 13:17:08,445][base_estimator.predict_proba] X.shape=(3745, 49)
[ 2017-10-04 13:17:08,782][base_estimator.predict_proba] y_proba.shape=(3745, 10)
[ 2017-10-04 13:17:08,783][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.train_1.predict)=57.46%
[ 2017-10-04 13:17:08,796][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.train_1.vote)=57.46%
[ 2017-10-04 13:17:08,796][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.train_1.avg)=57.46%
[ 2017-10-04 13:17:08,797][base_estimator.predict_proba] X.shape=(2773, 49)
[ 2017-10-04 13:17:09,120][base_estimator.predict_proba] y_proba.shape=(2773, 10)
[ 2017-10-04 13:17:09,126][base_estimator.fit] X_train.shape=(7493, 49), y_train.shape=(7493,)
[ 2017-10-04 13:17:11,545][base_estimator.predict_proba] X.shape=(3738, 49)
[ 2017-10-04 13:17:11,890][base_estimator.predict_proba] y_proba.shape=(3738, 10)
[ 2017-10-04 13:17:11,891][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.train_2.predict)=56.31%
[ 2017-10-04 13:17:11,904][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.train_2.vote)=56.31%
[ 2017-10-04 13:17:11,904][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.train_2.avg)=56.31%
[ 2017-10-04 13:17:11,905][base_estimator.predict_proba] X.shape=(2773, 49)
[ 2017-10-04 13:17:12,229][base_estimator.predict_proba] y_proba.shape=(2773, 10)
[ 2017-10-04 13:17:12,229][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.train.predict)=57.29%
[ 2017-10-04 13:17:12,269][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.train.vote)=57.29%
[ 2017-10-04 13:17:12,270][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.train.avg)=57.29%
[ 2017-10-04 13:17:12,270][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.test.predict)=52.25%
[ 2017-10-04 13:17:12,280][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.test.vote)=52.25%
[ 2017-10-04 13:17:12,280][kfold_wrapper.log_eval_metrics] Accuracy(win1/7x7/rf/3_folds.test.avg)=52.25%
[ 2017-10-04 13:17:12,285][fg_win_layer.fit_transform] [data][win1/7x7,train] tops[1].shape=(11231, 10, 1, 1)
[ 2017-10-04 13:17:12,285][data_cache.update] Updating data (train->win1/7x7/rf, shape=(11231, 10, 1, 1)) in disk: /home/guest_majian/python/gcForest_official/gcforest/mnist/fg-tree500-depth100-3folds/datas/train/win1-7x7-rf.npy
[ 2017-10-04 13:17:12,286][fg_win_layer.fit_transform] [data][win1/7x7,test] tops[1].shape=(2773, 10, 1, 1)
[ 2017-10-04 13:17:12,286][data_cache.update] Updating data (test->win1/7x7/rf, shape=(2773, 10, 1, 1)) in disk: /home/guest_majian/python/gcForest_official/gcforest/mnist/fg-tree500-depth100-3folds/datas/test/win1-7x7-rf.npy
[ 2017-10-04 13:17:12,286][fg_win_layer.fit_transform] [data][win1/10x10], bottoms=[u'X', u'y'], tops=[u'win1/10x10/ets', u'win1/10x10/rf']
[ 2017-10-04 13:17:12,287][fg_win_layer.fit_transform] [progress][win1/10x10] ti=0/2, top_name=win1/10x10/ets
[ 2017-10-04 13:17:12,287][fg_win_layer.fit_transform] [data][win1/10x10,train] bottoms.shape=11231x1x8x8,11231
[ 2017-10-04 13:17:12,289][win_utils.get_windows] get_windows_start: X.shape=(11231, 1, 8, 8), X_win.shape=(100, 0), nw=0, nh=0, c=1, win_x=10, win_y=10, stride_x=2, stride_y=2
[ 2017-10-04 13:17:12,436][win_utils.get_windows] get_windows_end
[ 2017-10-04 13:17:12,437][fg_win_layer.fit_transform] [data][win1/10x10,test] bottoms.shape=2773x1x8x8,2773
[ 2017-10-04 13:17:12,437][win_utils.get_windows] get_windows_start: X.shape=(2773, 1, 8, 8), X_win.shape=(100, 0), nw=0, nh=0, c=1, win_x=10, win_y=10, stride_x=2, stride_y=2
[ 2017-10-04 13:17:12,585][win_utils.get_windows] get_windows_end
